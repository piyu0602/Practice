Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
ANS:  select distinct CITY from STATION where SUBSTR(CITY,1,1) IN ('A','E','I','O','U');




Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
ANS: select distinct CITY from STATION where SUBSTR(CITY,length(CITY),1) IN ('A','E','I','O','U','a','e','i','o','u');





Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
ANS: select distinct CITY from STATION where SUBSTR(CITY,1,1) NOT IN ('A','E','I','O','U','a','e','i','o','u');




Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
ANS: select name from Employee order by name;



Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
ANS: select Name from STUDENTS where Marks>75 order by Right(Name,3) , ID asc;



Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

ANS: SELECT
    CASE
        WHEN A+B <= C or A+C <= B or B+C <= A THEN 'Not A Triangle'
        WHEN A=B  and  B=C THEN 'Equilateral' 
        WHEN A=B or A=C or B=C THEN 'Isosceles'
        WHEN A<>B and B<>C THEN 'Scalene'
   END tuple
FROM TRIANGLES;  




Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

ANS : select (Name || '(' || SUBSTR(Occupation,1,1) || ')') from OCCUPATIONS order by Name;
select ('There are a total of '||count(occupation)|| ' ' || lower(occupation) || 's' || '.') from Occupations group by Occupation order by count(occupation),Occupation asc;




You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.



Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.

ANS:  select N,CASE
    WHEN P is NULL THEN 'Root'
    WHEN N in (select P from BST) THEN 'Inner'
    else 'Leaf'
    END tuple
from BST
order by N;





Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers,
total number of managers, and total number of employees. Order your output by ascending company_code.
ANS: select c.company_code , c.founder , count(distinct e.lead_manager_code) ,count(distinct e.senior_manager_code) , count(distinct e.manager_code) , count(distinct e.employee_code) from Company c 
JOIN Employee e ON c.company_code = e.company_code GROUP BY c.company_code , c.founder ORDER BY c.company_code;




Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. 
Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- 
i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
Write a query to help Eve.

ANS: select 
    Case 
        when gr.Grade>=8 then
        st.Name
        when gr.Grade<8 then NULL
    END AS 
    NAME , gr.Grade , st.Marks
from Students st 
LEFT JOIN Grades gr 
ON st.Marks >= gr.MIN_MARK and st.Marks <= gr.MAX_MARK
ORDER BY 
gr.Grade desc,
st.Name asc,
st.Marks asc;
        
    


Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and 
name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which 
the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

ANS: select s.hacker_id , name from Submissions  s 
    JOIN Hackers h ON h.hacker_id = s.hacker_id
    JOIN Challenges c ON c.challenge_id = s.Challenge_id
    JOIN Difficulty d ON d.difficulty_level = c.difficulty_level
    Where s.Score = d.Score
    Group By Name , s.hacker_id
    Having count(s.challenge_id) > 1
    ORDER BY count(s.challenge_id) desc , s.hacker_id;





Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.

Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. 
Write a query to print the id, age, coins_needed,and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand
has same power, sort the result in order of descending age.

ANS: SELECT W.id, WP.age, W.coins_needed, W.power
FROM Wands W
JOIN Wands_Property WP ON W.code = WP.code
WHERE WP.is_evil = 0 AND W.coins_needed = (
    SELECT MIN(coins_needed)
    FROM Wands
    JOIN Wands_Property ON Wands.code = Wands_Property.code
    WHERE Wands.power = W.power AND Wands_Property.age = WP.age
)
ORDER BY W.power DESC, WP.age DESC;





Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student.
Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by
hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those
students from the result.

ANS: select h.hacker_id , h.name ,count(c.challenge_id) as cnt from Hackers h JOIN Challenges c 
    ON h.hacker_id = c.hacker_id
    group by c.hacker_id,h.name
    having 
    cnt = (select COUNT(c1.challenge_id) from Challenges c1 group by c1.hacker_id       ORDER BY count(*) desc LIMIT 1) OR
    cnt NOT IN (select COUNT(c2.challenge_id) from Challenges c2 group by c2.hacker_id         having c2.hacker_id <> c.hacker_id)
    ORDER BY cnt desc , c.hacker_id ;
    
